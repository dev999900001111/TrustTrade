{"additionalImports": ["java.util.List", "org.springframework.stereotype.Service", "org.springframework.beans.factory.annotation.Autowired", "com.example.demo.entity.*", "com.example.demo.repository.*", "java.math.BigDecimal", "java.time.*", "jakarta.validation.constraints.*", "lombok.Data"], "additionalJPAMethods": {}, "methods": {"createResearchReport": {"annotations": ["@Service", "@Override", "@Transactional"], "body": "        ResearchReport researchReport = ResearchReport.builder()\n                .investmentTrustId(requestBody.getInvestmentTrustId())\n                .title(requestBody.getTitle())\n                .content(requestBody.getContent())\n                .date(requestBody.getDate())\n                .build();\n        return researchReportRepository.save(researchReport);"}, "updateResearchReport": {"annotations": ["@Service", "@Override", "@Transactional"], "body": "        ResearchReport researchReport = researchReportRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Research report not found\"));\n        researchReport.setTitle(requestBody.getTitle());\n        researchReport.setContent(requestBody.getContent());\n        researchReport.setDate(requestBody.getDate());\n        return researchReportRepository.save(researchReport);"}, "deleteResearchReport": {"annotations": ["@Service", "@Override", "@Transactional"], "body": "        ResearchReport researchReport = researchReportRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Research report not found\"));\n        researchReportRepository.delete(researchReport);"}, "getResearchReports": {"annotations": ["@Service", "@Override", "@Transactional(readOnly = true)"], "body": "        return researchReportRepository.findAll();"}, "provideInvestmentAdvice": {"annotations": ["@Service", "@Override", "@Transactional"], "body": "        UserAccount userAccount = userAccountRepository.findById(requestBody.getUserAccountId())\n                .orElseThrow(() -> new RuntimeException(\"User account not found\"));\n        ResearchReport researchReport = researchReportRepository.findById(requestBody.getResearchReportId())\n                .orElseThrow(() -> new RuntimeException(\"Research report not found\"));\n        InvestmentAdvice investmentAdvice = InvestmentAdvice.builder()\n                .userAccount(userAccount)\n                .researchReport(researchReport)\n                .advice(requestBody.getAdvice())\n                .build();\n        return investmentAdviceRepository.save(investmentAdvice);"}}}