{"additionalImports": ["org.springframework.stereotype.Service", "org.springframework.beans.factory.annotation.Autowired", "com.example.demo.entity.*", "com.example.demo.repository.*", "java.math.BigDecimal", "java.time.*", "java.util.*", "jakarta.validation.constraints.*", "lombok.Data"], "additionalJPAMethods": {}, "methods": {"createAccessControl": {"annotations": ["@Service", "@Autowired"], "body": "        AccessControl accessControl = AccessControl.builder()\n                .targetType(requestBody.getTargetType())\n                .targetId(requestBody.getTargetId())\n                .permissions(requestBody.getPermissions())\n                .build();\n        return accessControlRepository.save(accessControl);"}, "updateAccessControl": {"annotations": ["@Service", "@Autowired"], "body": "        AccessControl accessControl = accessControlRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Access control not found\"));\n        accessControl.setTargetType(requestBody.getTargetType());\n        accessControl.setTargetId(requestBody.getTargetId());\n        accessControl.setPermissions(requestBody.getPermissions());\n        return accessControlRepository.save(accessControl);"}, "deleteAccessControl": {"annotations": ["@Service", "@Autowired"], "body": "        accessControlRepository.deleteById(id);"}, "createStaffAccount": {"annotations": ["@Service", "@Autowired"], "body": "        StaffAccount staffAccount = StaffAccount.builder()\n                .name(requestBody.getName())\n                .email(requestBody.getEmail())\n                .password(requestBody.getPassword())\n                .role(requestBody.getRole())\n                .build();\n        return staffAccountRepository.save(staffAccount);"}, "updateStaffAccount": {"annotations": ["@Service", "@Autowired"], "body": "        StaffAccount staffAccount = staffAccountRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Staff account not found\"));\n        staffAccount.setName(requestBody.getName());\n        staffAccount.setEmail(requestBody.getEmail());\n        staffAccount.setPassword(requestBody.getPassword());\n        staffAccount.setRole(requestBody.getRole());\n        return staffAccountRepository.save(staffAccount);"}, "deleteStaffAccount": {"annotations": ["@Service", "@Autowired"], "body": "        staffAccountRepository.deleteById(id);"}, "createAgencyAccount": {"annotations": ["@Service", "@Autowired"], "body": "        AgencyAccount agencyAccount = AgencyAccount.builder()\n                .name(requestBody.getName())\n                .email(requestBody.getEmail())\n                .password(requestBody.getPassword())\n                .role(requestBody.getRole())\n                .build();\n        return agencyAccountRepository.save(agencyAccount);"}, "updateAgencyAccount": {"annotations": ["@Service", "@Autowired"], "body": "        AgencyAccount agencyAccount = agencyAccountRepository.findById(id)\n                .orElseThrow(() -> new RuntimeException(\"Agency account not found\"));\n        agencyAccount.setName(requestBody.getName());\n        agencyAccount.setEmail(requestBody.getEmail());\n        agencyAccount.setPassword(requestBody.getPassword());\n        agencyAccount.setRole(requestBody.getRole());\n        return agencyAccountRepository.save(agencyAccount);"}, "deleteAgencyAccount": {"annotations": ["@Service", "@Autowired"], "body": "        agencyAccountRepository.deleteById(id);"}, "authenticateUser": {"annotations": ["@Service", "@Autowired"], "body": "        AuthenticationMethod authenticationMethod = authenticationMethodRepository.findByUsername(requestBody.getUsername())\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\n        if (!authenticationMethod.getPassword().equals(requestBody.getPassword())) {\n            throw new RuntimeException(\"Invalid password\");\n        }\n        if (authenticationMethod.getTwoFactorAuthentication() != requestBody.getTwoFactorAuthentication()) {\n            throw new RuntimeException(\"Invalid two-factor authentication\");\n        }\n        return authenticationMethod;"}} }